#ifndef _NEVISPCI_LIB_H_
#define _NEVISPCI_LIB_H_

/************************************************************************
*  File: nevispci_lib.h
*
*  Library for accessing PCI devices, possibly using a Kernel PlugIn driver.
*  The code accesses hardware using WinDriver's WDC library.
*  Code was generated by DriverWizard v12.6.0
*
*  Jungo Connectivity Confidential. Copyright (c) 2017 Jungo Connectivity Ltd.  http://www.jungo.com
*************************************************************************/

#include "wdc_lib.h"
#include "pci_regs.h"
#include "bits.h"

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************
  General definitions
 *************************************************************/
/* Kernel PlugIn driver name (should be no more than 8 characters) */
#define KP_NEVISPCI_DRIVER_NAME "KP_NEVISPCI"


/* Default vendor and device IDs (0 == all) */
/* TODO: Replace the ID values with your device's vendor and device IDs */
#define NEVISPCI_DEFAULT_VENDOR_ID 0x1172 /* Vendor ID */
#define NEVISPCI_DEFAULT_DEVICE_ID 0x4 /* Device ID */





/* Address space information struct */
#define MAX_TYPE 8
typedef struct {
    DWORD dwAddrSpace;
    CHAR sType[MAX_TYPE];
    CHAR sName[MAX_NAME];
    CHAR sDesc[MAX_DESC];
} NEVISPCI_ADDR_SPACE_INFO;

/* Interrupt result information struct */
typedef struct {
    DWORD dwCounter; /* Number of interrupts received */
    DWORD dwLost;    /* Number of interrupts not yet handled */
    WD_INTERRUPT_WAIT_RESULT waitResult; /* See WD_INTERRUPT_WAIT_RESULT values
                                            in windrvr.h */
    DWORD dwEnabledIntType; /* Interrupt type that was actually enabled
                               (MSI/MSI-X / Level Sensitive / Edge-Triggered) */
    DWORD dwLastMessage; /* Message data of the last received MSI/MSI-X
                            (Windows Vista and higher); N/A to line-based
                            interrupts. */
} NEVISPCI_INT_RESULT;
/* TODO: You can add fields to NEVISPCI_INT_RESULT to store any additional
         information that you wish to pass to your diagnostics interrupt
         handler routine (DiagIntHandler() in nevispci_diag.c). */

/* NEVISPCI diagnostics interrupt handler function type */
typedef void (*NEVISPCI_INT_HANDLER)(WDC_DEVICE_HANDLE hDev,
    NEVISPCI_INT_RESULT *pIntResult);

/* NEVISPCI diagnostics plug-and-play and power management events handler function
 * type */
typedef void (*NEVISPCI_EVENT_HANDLER)(WDC_DEVICE_HANDLE hDev, DWORD dwAction);



/*************************************************************
  Function prototypes
 *************************************************************/
/* -----------------------------------------------
    NEVISPCI and WDC libraries initialize/uninitialize
   ----------------------------------------------- */
/* Initialize the NEVISPCI and WDC libraries */
DWORD NEVISPCI_LibInit(void);
/* Uninitialize the NEVISPCI and WDC libraries */
DWORD NEVISPCI_LibUninit(void);

#ifndef __KERNEL__
/* -----------------------------------------------
    Device open/close
   ----------------------------------------------- */
/* Open a device handle */
WDC_DEVICE_HANDLE NEVISPCI_DeviceOpen(const WD_PCI_CARD_INFO *pDeviceInfo);
/* Close a device handle */
BOOL NEVISPCI_DeviceClose(WDC_DEVICE_HANDLE hDev);

/* -----------------------------------------------
    Interrupts
   ----------------------------------------------- */
/* Enable interrupts */
DWORD NEVISPCI_IntEnable(WDC_DEVICE_HANDLE hDev, NEVISPCI_INT_HANDLER funcIntHandler);
/* Disable interrupts */
DWORD NEVISPCI_IntDisable(WDC_DEVICE_HANDLE hDev);
/* Check whether interrupts are enabled for the given device */
BOOL NEVISPCI_IntIsEnabled(WDC_DEVICE_HANDLE hDev);

/* -----------------------------------------------
    Plug-and-play and power management events
   ----------------------------------------------- */
/* Register a plug-and-play or power management event */
DWORD NEVISPCI_EventRegister(WDC_DEVICE_HANDLE hDev,
    NEVISPCI_EVENT_HANDLER funcEventHandler);
/* Unregister a plug-and-play or power management event */
DWORD NEVISPCI_EventUnregister(WDC_DEVICE_HANDLE hDev);
/* Check whether a given plug-and-play or power management event is registered
 */
BOOL NEVISPCI_EventIsRegistered(WDC_DEVICE_HANDLE hDev);
#endif /* ifndef __KERNEL */

/* -----------------------------------------------
    Address spaces information
   ----------------------------------------------- */
/* Get number of address spaces */
DWORD NEVISPCI_GetNumAddrSpaces(WDC_DEVICE_HANDLE hDev);
/* Get address space information */
BOOL NEVISPCI_GetAddrSpaceInfo(WDC_DEVICE_HANDLE hDev,
    NEVISPCI_ADDR_SPACE_INFO *pAddrSpaceInfo);


/* -----------------------------------------------
    Debugging and error handling
   ----------------------------------------------- */
/* Get last error */
const char *NEVISPCI_GetLastErr(void);

#ifdef __cplusplus
}
#endif

#endif /* _NEVISPCI_LIB_H_ */

